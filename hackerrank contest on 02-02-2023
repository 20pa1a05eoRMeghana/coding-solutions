Tree: Height of a Binary Tree
    def height(root):
    lefth = 0
    righth = 0
    if(root.left):
        lefth = height(root.left)+1
    if(root.right):
        righth = height(root.right)+1
    if(righth > lefth):
        return righth
    else:
        return lefth
    
Binary Search Tree : Insertion
    def insert(self, val):
        if self.root is None:
            self.root = Node(val)
        else:
            curr = self.root
            while True:
                if val < curr.info:
                    if curr.left is None:
                        curr.left = Node(val)
                        break
                    else:
                        curr = curr.left
                else:
                    if curr.right is None:
                        curr.right = Node(val)
                        break
                    else:
                        curr = curr.right

Tree: Level Order Traversal (same as the solution submitted for level order traversal in leetcode)
    def levelOrder(root):
    #Write your code here
    if not root:
            return []
    exque = deque()
    exque.append(root)
    res = []
    while len(exque):
        lev = []
        for i in range(len(exque)):
            ex = exque.popleft()
            lev.append(ex.info)
            if ex.left:
                exque.append(ex.left)
            if ex.right:
                exque.append(ex.right)
        for i in lev:
            res.append(i)      
    print(*res,sep=" ",end=" ")
    
Binary Search Tree : Lowest Common Ancestor
    def lca(root, v1, v2):
  #Enter your code here
    if (root.info < v1 and root.info > v2):
        return root
    elif (root.info > v1 and root.info < v2):
        return root
    elif root.info < v1 and root.info < v2:
        return lca(root.right, v1, v2)
    elif root.info > v1 and root.info > v2:
        return lca(root.left, v1, v2)
    elif root.info == v1 or root.info == v2:
        return root
