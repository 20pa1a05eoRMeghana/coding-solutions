1. First Unique Character in a String
 
 class Solution:
    def firstUniqChar(self, s: str) -> int:
        l1=list(s)
        c=0
        for i in range(len(l1)):
            if s.count(l1[i])==1:
                return i
                c=c+1
                break
        if c==0:
            return -1
            
class Solution:
    def firstUniqChar(self, s: str) -> int:
        for i in range(len(s)):
            x=s.count(s[i])
            if x==1:
                return i
        return -1
        
2. Longest Substring with At Least K Repeating Characters
  
  Python solution on 23-01-2023
  
  class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        temp1 = ""
        temp2 = ""
        res = []
        for i in s:
            if i not in temp1:
                temp1 = temp1 + i
                temp2 = temp1
                res.append(len(temp2))
            else:
                temp1 = temp1 + i
                temp1 = temp1[(temp1.index(i) + 1) :]
        if not res:
            res.append(len(s))
        return max(res)
        
  Java solution on 01-10-2022
  
  class Solution {
    public int lengthOfLongestSubstring(String s) {
        int[] counts = new int[128];
        int start = 0, end = 0, res = 0;
        for (; end < s.length(); end++) {
            char c = s.charAt(end);
            while (counts[c] > 0) {
                counts[s.charAt(start)]--;
                start++;
            } 
            counts[c]++;
            res = Math.max(res, end - start + 1);
        }
        return res;
        
    }
}
