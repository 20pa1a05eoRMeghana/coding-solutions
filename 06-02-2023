Number of provinces
 class Solution {
    public static void dfs(int node,ArrayList<ArrayList<Integer>>adjlis,int vis[]){
        vis[node] = 1;
        for(Integer it: adjlis.get(node)){
            if(vis[it]==0){
                dfs(it,adjlis,vis);
            }
        }
    }
    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        ArrayList<ArrayList<Integer>>adjlis = new ArrayList<>();
        for(int i=0;i<n;i++){
            adjlis.add(new ArrayList<>());
        }
        for(int i=0;i<n;i++){
            for (int j=0;j<n;j++){
                if(isConnected[i][j]==1 && i != j){
                    adjlis.get(i).add(j);
                    adjlis.get(j).add(i);
                }
            }
        }
        int vis[] = new int[n];
        int c=0;
        for (int i=0;i<n;i++){
            if(vis[i]==0){
                c++;
                dfs(i,adjlis,vis);
            }
        }
        return c;

    }
}

Number of islands
 class Solution {
    public static void DFS(char grid[][],int i,int j){
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == '0')
            return;
        grid[i][j] = '0';
        DFS(grid, i+1, j);
        DFS(grid, i-1, j); 
        DFS(grid, i, j-1); 
        DFS(grid, i, j+1);
    }
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int c = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='1'){
                    c=c+1;
                    DFS(grid,i,j);
                }
            }
        }
        return c;
    }
}
